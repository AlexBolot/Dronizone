version: '3'
services:

############  WAREHOUSE  #################

  warehouse-server:
    container_name: dronazone-warehouse-server
    build:
      context: warehouse
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/warehouse-0.0.1-SNAPSHOT.jar
    image: dronazone-warehouse-server:latest
    expose:
      - 8081
    ports:
      - 8081:8080
    networks:
      - dronazone-network
    logging:
      driver: json-file
    depends_on:
      - postgres-warehouse
      - kafka
    links:
      - postgres-warehouse
    environment:
      DATASOURCE_HOST: postgres-warehouse
      NOTIFICATION_HOST: notification
      DRONE_HOST: http://drone-server:8080

############  ORDER  #################

  order-server:
    container_name: dronazone-order-server
    build:
      context: OrderService
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/OrderService-1.0-SNAPSHOT.jar
    image: dronazone-order-server:latest
    expose:
      - 8082
    ports:
      - 8082:8080
    networks:
      - dronazone-network
    logging:
      driver: json-file
    environment:
      DATASOURCE_HOST: postgres-order
      NOTIFY_HOST: http://notification:8080
      DATASOURCE_USERNAME: dronazone
      DATASOURCE_PWD: dronazone
      WAREHOUSE_HOST: http://warehouse-server:8080
    depends_on:
      - postgres-order
      - kafka
    links:
      - postgres-order

############  DRONE  #################

  drone-server:
    container_name: dronazone-drone-server
    build:
      context: drone
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/drone-1.0-SNAPSHOT.jar
    image: dronazone-drone-server:latest
    expose:
      - 8083
    ports:
      - 8083:8080
    networks:
      - dronazone-network
    logging:
      driver: json-file
    environment:
      DATASOURCE_HOST: postgres-order
      NOTIFICATION_HOST: notification
      ORDER_SERVICE_HOST: http://order-server
    depends_on:
      - postgres-drone
      - kafka
    links:
      - postgres-drone

  ############  DRONE  #################

  watchdog-server:
    container_name: dronazone-watchdog-server
    build:
      context: watchdog
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/watchdog-1.0-SNAPSHOT.jar
    image: dronazone-watchdog-server:latest
    expose:
      - 8085
    ports:
      - 8085:8080
    networks:
      - dronazone-network
    logging:
      driver: json-file
    environment:
      DATASOURCE_HOST: postgres-watchdog
      NOTIFICATION_HOST: notification
      ORDER_SERVICE_HOST: http://watchdog-server
    depends_on:
      - postgres-watchdog
      - kafka
    links:
      - postgres-watchdog

############  POSTGRES  #################

  postgres-order:
    container_name: postgres-dronazone-order
    image: postgres
    environment:
      POSTGRES_PASSWORD: dronazone
      POSTGRES_USER: dronazone
      POSTGRES_DB: dronazone
    networks:
      - dronazone-network
  postgres-warehouse:
    container_name: postgres-dronazone-warehouse
    image: postgres
    environment:
      POSTGRES_PASSWORD: dronazone
      POSTGRES_USER: dronazone
      POSTGRES_DB: dronazone
    networks:
      - dronazone-network
  postgres-drone:
    container_name: postgres-dronazone-drone
    image: postgres
    environment:
      POSTGRES_PASSWORD: dronazone
      POSTGRES_USER: dronazone
      POSTGRES_DB: dronazone
    networks:
      - dronazone-network
  postgres-watchdog:
    container_name: postgres-dronazone-watchdog
    image: postgres
    environment:
      POSTGRES_PASSWORD: dronazone
      POSTGRES_USER: dronazone
      POSTGRES_DB: dronazone
    networks:
      - dronazone-network

############  NOTIFICATION  #################

  notification:
    container_name: dronazone-notification-mock-server
    build:
      context: mock_notification_service
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/mock_notification_service-0.0.1-SNAPSHOT.jar
    image: dronizone-mock-notification
    expose:
      - 8080
    ports:
      - 44444:8080
    depends_on:
      - kafka
    networks:
      - dronazone-network
    logging:
      driver: json-file

############  DRONE MOCK  #################

  drone-mock:
    container_name: dronazone-drone-mock-server
    build:
      context: dronemock
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/dronemock-0.0.1-SNAPSHOT.jar
    image: dronizone-mock-drone
    expose:
      - 8080
    ports:
      - 8084:8080
    depends_on:
      - kafka
      - drone-server
    networks:
      - dronazone-network
    logging:
      driver: json-file
    environment:
      DRONE_SERVICE: http://drone-server:8080/

############  KAFKA  #################

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    expose:
      - 9092
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "drones:1:1,delivery:1:1"
  telegraf:
    image: telegraf:latest
    network_mode: "host"
    volumes:
      - ./dockers/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - kafka
      - influxdb


  ############  GRAFANA  #################
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    expose:
      - 3000
    ports:
      - 3000:3000
    depends_on:
      - kafka
    networks:
      - dronazone-network
      - monitoring

############  INFLUX  #################

  influxdb:
    image: influxdb
    container_name: influxdb
    restart: always
    expose:
      - 8086
    ports:
      - 8086:8086
    depends_on:
      - kafka
    networks:
      - dronazone-network
      - monitoring


networks:
  dronazone-network:
    driver: bridge
  monitoring:
